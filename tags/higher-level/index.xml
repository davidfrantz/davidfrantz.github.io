<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Higher Level | DAVID FRANTZ</title>
    <link>https://davidfrantz.github.io/tags/higher-level/</link>
      <atom:link href="https://davidfrantz.github.io/tags/higher-level/index.xml" rel="self" type="application/rss+xml" />
    <description>Higher Level</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019-2020 David Frantz</copyright><lastBuildDate>Tue, 08 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://davidfrantz.github.io/img/icon-192.png</url>
      <title>Higher Level</title>
      <link>https://davidfrantz.github.io/tags/higher-level/</link>
    </image>
    
    <item>
      <title>FORCE Tutorial: Interpolation</title>
      <link>https://davidfrantz.github.io/tutorials/force-tsi/tsi/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://davidfrantz.github.io/tutorials/force-tsi/tsi/</guid>
      <description>&lt;p&gt;&lt;em&gt;This tutorial uses FORCE v. 3.5&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;learning-objective&#34;&gt;&lt;strong&gt;Learning Objective&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This tutorial introduces the Time Series Analysis (TSA) submodule of the &lt;strong&gt;FORCE Higher Level Processing system (HLPS)&lt;/strong&gt;, shows how to interpolate time series, and how to visualize and animate them via QGIS plugins.&lt;/p&gt;
&lt;h2 id=&#34;why-interpolation&#34;&gt;&lt;strong&gt;Why interpolation?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Despite regular observations, EO time series are generally not equidistant.
Nominal equidistance is only given for areas that are not covered by orbital overlaps (16 days revisit at nadir for a single Landsat).
For areas in lateral overlaps, we have alternating revisits of 1 and 7 days.
If we are getting closer to the poles, we even get triple, quadruple etc. overlaps, which complicates this alternating pattern.
The same applies if we consider multiple sensors, e.g. two Landsat and two Sentinel-2 satellites.
And of course, nominal revisit != actual revisit.
We cannot see through clouds (unless we are talking radar).
Probably, you want to remove snow observations.
There might have been some sensor or ground segment outages, or the data couldn&#39;t have been processed to our quality requirements (e.g. tier 2 data).
The sensor might not have looked on Earth as the satellite took a detour to avoid space debris etc. etc..&lt;/p&gt;
&lt;p&gt;Interpolation might simply be used to close these gaps.
It smoothes the time series, and thus effectively reduces noise.
Equidistance is established, which might be needed for following processing steps.&lt;/p&gt;
&lt;p&gt;Time Series interpolation is a basic option within the &lt;a href=&#34;https://force-eo.readthedocs.io/en/latest/components/higher-level/tsa/index.html&#34;&gt;Time Series Analysis (TSA)&lt;/a&gt; submodule of the &lt;a href=&#34;https://force-eo.readthedocs.io/en/latest/components/higher-level/index.html&#34;&gt;FORCE Higher Level Processing system (HLPS)&lt;/a&gt;, and may be performed before using more advanced time series analysis methods:&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/force-tsa-workflow.jpg&#34; data-caption=&#34;Time Series Analysis Workflow&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/force-tsa-workflow.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Time Series Analysis Workflow
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;rbf-interpolation&#34;&gt;&lt;strong&gt;RBF interpolation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In FORCE, a couple of interpolation methods are implemented.
Most often, we use ensembles of Radial Basis Function (RBF) convolution filters (see this paper &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0303243416301003&#34;&gt;here&lt;/a&gt;).
As this is a convolution filter, no fitting is involved (as e.g. compared to splines or Savitzky-Golay filters), thus the method is really fast, while keeping a good balance between retaining detail and smoothing.&lt;/p&gt;
&lt;p&gt;The method is basically a moving average filter on steroids.
A kernel is moved over the time series, and the observations are weighted according to a Gaussian distribution (Gaussian lowpass).
This means that an observation in the middle of the kernel gets a higher weight.&lt;/p&gt;
&lt;p&gt;Now, data density is usually variable, which means that we have seasons with higher data availability (e.g. in the summer) - and seasons with poor data availability.
For good data situations, we would want to have a narrow Gaussian to more closely follow the actual time series.
For bad data situations, however, a narrow kernel would result in many nodata values and wouldn&#39;t smooth the time series appropriately.&lt;/p&gt;
&lt;p&gt;Therefore, we use multiple kernels of different widths.
The estimates from those kernels are eventually aggregated using a weighted average, wherein the weights correspond to the data availability within each kernel.
This gives preference to the kernel with better data coverage.&lt;/p&gt;
&lt;p&gt;This tutorial will show you how to generate an RBF-interpolated time series, and how to dynamically look at the data.
I will demonstrate this for the island of Crete (greece) in the Mediterranean Sea.
An interpolated time series looks like this:&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-tsi-rbf.jpg&#34; data-caption=&#34;Interpolated time series using RBF ensembles&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-tsi-rbf.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Interpolated time series using RBF ensembles
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;parameterfile&#34;&gt;&lt;strong&gt;Parameterfile&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We start by generating an empty TSA parameterfile, and rename the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /data/europe/interpolation
force-parameter /data/europe/interpolation TSA 1
cd /data/europe/interpolation
mv TSA-skeleton.prm tsi.prm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;TSA
An empty parameter file skeleton was written to
  /data/europe/interpolation/TSA-skeleton.prm
Note that all parameters need to be given, even though some may not be used
with your specific parameterization.
You should rename the file, e.g. my-first-TSA.prm.
Parameterize according to your needs and run with
force-higher-level /data/europe/interpolation/my-first-TSA.prm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you prefer a more compact parameterfile without all the comments, use &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt; as the last parameter.
The full set of parameters is also documented &lt;a href=&#34;https://force-eo.readthedocs.io/en/latest/components/higher-level/tsa/param.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input / Output directories&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For this tutorial, we assume that we already have an existing Level 2 ARD datapool, which contains preprocessed data for multiple years (see &lt;a href=&#34;https://davidfrantz.github.io/tutorials/force-ard/l2-ard/&#34;&gt;ARD tutorial&lt;/a&gt;).
The parent directory of this datapool goes into the DIR_LOWER parameter.
The DIR_HIGHER parameter names the output directory, where the interpolated time series will be generated (although technically possible, I suggest to use a different file path). Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DIR_LOWER = /data/europe/level2
DIR_HIGHER = /data/europe/interpolation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Analysis mask&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As we are only interested in the land surface - and there is a lot of water around Crete - we use a processing mask.
Have a look at the &lt;a href=&#34;https://davidfrantz.github.io/tutorials/force-masks/masks/&#34;&gt;processing mask tutorial&lt;/a&gt; for further details.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /data/europe/masks
cp /data/europe/level2/datacube-definition.prj -t /data/europe/masks
force-cube /data/gis/admin/crete.gpkg /data/europe/masks rasterize 30
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0...10...20...30...40...50...60...70...80...90...100 - done.
0...10...20...30...40...50...60...70...80...90...100 - done.
0...10...20...30...40...50...60...70...80...90...100 - done.
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the parameterfile, use the masks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DIR_MASK = /data/europe/masks
BASE_MASK = crete.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Output options&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For interoperability with the QGIS plugins, we will generate one output image (for each index) in GeoTiff format, which will have the interpolated dates as bands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OUTPUT_FORMAT = GTiff
OUTPUT_EXPLODE = FALSE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All other parameters are not relevant for now.
However, please note that you can generate a lot of time series based outputs at the same time, e.g. Trend Analysis, Land Surface Phenology, etc.
This saves time as data is only read once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spatial extent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FORCE HLPS requires a square processing extent, which can be set using &lt;code&gt;X_TILE_RANGE&lt;/code&gt; and &lt;code&gt;Y_TILE_RANGE&lt;/code&gt;. Then, if the extent of our region of interest is not square, we can further refine the processing extent by specifying a tile allow-list (&lt;code&gt;FILE_TILE&lt;/code&gt;). Please see the &lt;a href=&#34;https://davidfrantz.github.io/tutorials/force-datacube/datacube/&#34;&gt;datacube tutorial&lt;/a&gt; for more details, and I also suggest you to have a look at the &lt;a href=&#34;https://force-eo.readthedocs.io/en/latest/components/higher-level/hl-compute.html&#34;&gt;computing model of HLPS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are different ways to obtain these values, e.g. by generating, and filtering a shapefile with tiles via &lt;code&gt;force-tabulate-grid&lt;/code&gt;. The easiest way, however, is to use &lt;code&gt;force-tile-extent&lt;/code&gt; with a vector geometry. Example for Crete, Greece:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-tile-extent /data/gis/admin/crete.gpkg /data/europe/level2 /data/europe/interpolation/crete.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Suggested Processing extent:
X_TILE_RANGE = 103 111
Y_TILE_RANGE = 101 105

Processing extent is not square.
Suggest to use the tile allow-list:
FILE_TILE = /data/europe/interpolation/crete.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Block size&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The block size is a parameter that you should only adjust if you are running in RAM-shortages.
&lt;em&gt;First, try the default value and donât worry&lt;/em&gt;.
However, if the program is &lt;code&gt;killed&lt;/code&gt; by the system, this can be mitigated by adjusting &lt;code&gt;BLOCK_SIZE&lt;/code&gt;.
Please have a look at the &lt;a href=&#34;https://force-eo.readthedocs.io/en/latest/components/higher-level/hl-compute.html&#34;&gt;computing model&lt;/a&gt; to understand how blocks are implemented and used in FORCE.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt;  The block size is a value, which was set in Level 2 Processing; thus the default block size aligns with the physical layout of the files, and can be considered optimal for reading speed. If you adjust it, it is recommended to use a block size, which is a fraction of the original block size (without remainder, e.g. 1/2 of the original value).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Quality screening&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This here is &lt;strong&gt;super-important,&lt;/strong&gt; and cannot be stressed enough!&lt;/p&gt;
&lt;p&gt;Without proper quality screening, the results will look like s#%$, trash-in, trash-out!
By default, FORCE screens for nodata values, various cloud types, cloud shadows, snow, sub-zero or saturated reflectance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SCREEN_QAI = NODATA CLOUD_OPAQUE CLOUD_BUFFER CLOUD_CIRRUS CLOUD_SHADOW SNOW SUBZERO SATURATION
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition, recognizing that cloud masks are never perfect, TSA offers an outlier detection routine.
This screens each pixelâs time series and might be used to remove undetected cloud, cloud shadow, or snow remnants.
The outlier detection is iteratively removing outliers until the time series noise is smaller than the given value.
Note however: this method might also remove some âvalidâ data points, e.g. mowing events in intensively managed grasslands.
This risk increases with decreasing data availability.&lt;/p&gt;
&lt;p&gt;Following the outlier removal, there is an inliner restoration.
If an observation (flagged as cloud, cloud shadow etc.) fits well into the time series trajectory, it will be restored.&lt;/p&gt;
&lt;p&gt;For our purpose, using this option is fine, thus, let&#39;s keep the default values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ABOVE_NOISE = 3
BELOW_NOISE = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Temporal extent, Sensor, Index&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To eventually generate a long term animation, letâs use 30 years of Landsat data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TIME_RANGE = 1990-01-01 2019-12-31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FORCE HLPS allows you to easily combine data from different sensors - provided that we only use mutually available bands.
For this tutorial, we are using data from the Landsat sensors:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SENSORS = LND04 LND05 LND07 LND08
RESOLUTION = 30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All processing in the TSA submodule is performed band-wise.
You can choose from a fairly long list of spectral bands and indices (see &lt;a href=&#34;https://force-eo.readthedocs.io/en/latest/components/higher-level/tsa/param.html&#34;&gt;here&lt;/a&gt;).
HLPS will only read required bands to reduce I/O.
In order to generate a nice-looking and information-rich animation, we are using the three tasseled cap components:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;INDEX = TC-BRIGHT TC-GREEN TC-WET
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Interpolation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now, letâs define the interpolation parameters.
We wil be using the RBF interpolation to create a smoothed time series with 16-day interpolation steps.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;INTERPOLATE = RBF
INT_DAY = 16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are commonly using following widths for the gaussians. The width (in days) refers to full-width-at-half-maximum.
This generally works fine, but feel free to experiment here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RBF_SIGMA = 8 16 32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cutoff parameter determines the width of the kernels.
It works similar to the confidence level in statistical tests, i.e. 0.95 means that we cut the kernel such that 95% of the Gaussian is retained.
Essentially, this paramter determines how many nodata values will remain in the time series.
You will have less nodata values with values closer to one.
However, the interpolated values will also be less reliable when the next valid observations are too far away (remember: trash-in, trash-out).
It also determines processing speed: more narrow kernels are faster.
Commonly, we are using the default value &lt;code&gt;0.95&lt;/code&gt;.
However, as our primary goal is to generate a nice-looking animation, we bump this parameter up:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RBF_CUTOFF = 0.995
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;..and of course, we request outputting the interpolated time series:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OUTPUT_TSI = TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Parallelization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HLPS uses a computing model, which &lt;em&gt;streams&lt;/em&gt; the data.
Please have a detailed look the at &lt;a href=&#34;https://force-eo.readthedocs.io/en/latest/components/higher-level/hl-compute.html&#34;&gt;computing model of HLPS&lt;/a&gt;.
Most often, generating interpolated time series (without doing anything else) is input-, or output-bound.
However, this strongly varies with data density, the number of requested indices, disc speed (SSD vs HDD, RAID or not, â¦), CPU clock speed, if you read/write from/to different (or the same) discs etc&amp;hellip;
The progress bar will tell you how much time is spent for reading, computing, and writing.
This helps you identify if your job is e.g. input-limited. You might want to adjust the settings accordingly (also note that you may have more or less CPUs than me).
Please also note: fairly often, inexperienced users tend to overdo parallel reads/writes beyond a value that is reasonable - if reading/writing doesnât accelerate when you add more CPUs, this is likely the case (you might even slow down your job by overdoing I/O).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NTHREAD_READ = 8
NTHREAD_COMPUTE = 7
NTHREAD_WRITE = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;processing&#34;&gt;&lt;strong&gt;Processing&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Processing is straightforward:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-higher-level /data/europe/interpolation/tsi.prm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;number of processing units: 280
 (active tiles: 28, chunks per tile: 10)
________________________________________
Progress:                        100.00%
Time for I/C/O:           054%/037%/008%
ETA:             00y 00m 00d 00h 00m 00s

________________________________________
Real time:       00y 00m 00d 00h 58m 41s
Virtual time:    00y 00m 00d 01h 32m 54s
Saved time:      00y 00m 00d 00h 34m 13s

________________________________________
Virtual I-time:  00y 00m 00d 00h 50m 30s
Virtual C-time:  00y 00m 00d 00h 34m 31s
Virtual O-time:  00y 00m 00d 00h 07m 53s

________________________________________
I-bound time:    00y 00m 00d 00h 23m 42s
C-bound time:    00y 00m 00d 00h 07m 10s
O-bound time:    00y 00m 00d 00h 00m 26s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this, we do some postprocessing for simplified data handling, and to prepare the data for ingestion into the QGIS plugins.
First, we generate a mosaic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-mosaic /data/europe/interpolation
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mosaicking 3 products:
1 1990-2019_001-365_HL_TSA_LNDLG_TCB_TSI.tif
2 1990-2019_001-365_HL_TSA_LNDLG_TCG_TSI.tif
3 1990-2019_001-365_HL_TSA_LNDLG_TCW_TSI.tif

mosaicking 1990-2019_001-365_HL_TSA_LNDLG_TCW_TSI.tif
27 chips found.

mosaicking 1990-2019_001-365_HL_TSA_LNDLG_TCB_TSI.tif
27 chips found.

mosaicking 1990-2019_001-365_HL_TSA_LNDLG_TCG_TSI.tif
27 chips found.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we build a four-dimensional stack from the three tasseled cap components.
This stack is sorted by date, but interleaved by thematic band.
This data model is a prerequisite to the usage of the following QGIS plugins.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; For very long time series, &lt;code&gt;force-stack&lt;/code&gt; still seems a bit slow - but at least it works&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd mosaic
force-stack *TCB*TSI.vrt *TCG*TSI.vrt *TCW*TSI.vrt 4D-Tasseled-Cap-TSI.vrt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;file 1:
  /data/europe/interpolation/mosaic
  1990-2019_001-365_HL_TSA_LNDLG_TCB_TSI.vrt
  9000 4000 684
file 2:
  /data/europe/interpolation/mosaic
  1990-2019_001-365_HL_TSA_LNDLG_TCG_TSI.vrt
  9000 4000 684
file 3:
  /data/europe/interpolation/mosaic
  1990-2019_001-365_HL_TSA_LNDLG_TCW_TSI.vrt
  9000 4000 684

Same number of bands detected. Stacking by band.

Band 0001: 1990-2019_001-365_HL_TSA_LNDLG_TCB_TSI.vrt band 1
Band 0002: 1990-2019_001-365_HL_TSA_LNDLG_TCG_TSI.vrt band 1
Band 0003: 1990-2019_001-365_HL_TSA_LNDLG_TCW_TSI.vrt band 1
Band 0004: 1990-2019_001-365_HL_TSA_LNDLG_TCB_TSI.vrt band 2
Band 0005: 1990-2019_001-365_HL_TSA_LNDLG_TCG_TSI.vrt band 2
Band 0006: 1990-2019_001-365_HL_TSA_LNDLG_TCW_TSI.vrt band 2
Band 0007: 1990-2019_001-365_HL_TSA_LNDLG_TCB_TSI.vrt band 3
Band 0008: 1990-2019_001-365_HL_TSA_LNDLG_TCG_TSI.vrt band 3
Band 0009: 1990-2019_001-365_HL_TSA_LNDLG_TCW_TSI.vrt band 3
...
Band 2050: 1990-2019_001-365_HL_TSA_LNDLG_TCB_TSI.vrt band 684
Band 2051: 1990-2019_001-365_HL_TSA_LNDLG_TCG_TSI.vrt band 684
Band 2052: 1990-2019_001-365_HL_TSA_LNDLG_TCW_TSI.vrt band 684
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For rapid display, we compute pyramids:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-pyramid 4D-Tasseled-Cap-TSI.vrt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/data/europe/interpolation/mosaic/4D-Tasseled-Cap-TSI.vrt
computing pyramids for 4D-Tasseled-Cap-TSI.vrt
...10...20...30...40...50...60...70...80...90...100 - done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;visualization&#34;&gt;&lt;strong&gt;Visualization&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Layer Styling&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s drag&#39;n&#39;drop the &lt;code&gt;4D-Tasseled-Cap-TSI.vrt&lt;/code&gt; into &lt;strong&gt;QGIS&lt;/strong&gt;, and visualize the Tasseled Cap components of the 1st timestamp as RGB composite (using the &lt;code&gt;Multiband color&lt;/code&gt; renderer), i.e. we put the first three bands into the red (Brightness), green (Greenness), and blue (Wetness) channels for intuitive color interpretation.
The chosen stretch will later be applied to the animation as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time Series Plots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can conveniently look at the pixels&#39;s time series using the &lt;a href=&#34;https://raster-data-plotting.readthedocs.io/en/latest/&#34;&gt;Raster Data Plotting&lt;/a&gt; plugin (Â© &lt;a href=&#34;mailto:andreas.rabe@geo.hu-berlin.de&#34;&gt;Andreas Rabe&lt;/a&gt;).
I am using red, green, and blue lines for the Brigthness, Greenness, and Wetness components, respectively, and decrease the symbol size a bit.&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-tsi-rdp.jpg&#34; data-caption=&#34;Raster Data Plotting plugin&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-tsi-rdp.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Raster Data Plotting plugin
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Time Series Animation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s use the &lt;a href=&#34;https://raster-timeseries-manager.readthedocs.io/en/latest/&#34;&gt;Raster Timeseries Manager&lt;/a&gt; plugin (Â© &lt;a href=&#34;mailto:andreas.rabe@geo.hu-berlin.de&#34;&gt;Andreas Rabe&lt;/a&gt;) to generate a web- or presentation-ready animation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SETUP:&lt;/em&gt;&lt;/strong&gt;  For preparing the animation, go to the plugin&#39;s &lt;code&gt;System&lt;/code&gt; tab.
This needs to be done only once and will set up all necessary tools for saving the animation.
For this, you need to install &lt;a href=&#34;https://imagemagick.org/script/download.php&#34;&gt;ImageMagick&lt;/a&gt;, and then tell the plugin where the &lt;code&gt;imagemagick&lt;/code&gt; and &lt;code&gt;ffmpeg&lt;/code&gt; executables are located.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Simply select &lt;code&gt;4D-Tasseled-Cap-TSI&lt;/code&gt; in the &lt;code&gt;Timeseries&lt;/code&gt; field.
Now, you can already look at the animation (hit play &lt;code&gt;&amp;gt;&lt;/code&gt;).
While the animation is running, you can even pan and zoom in the map canvas.
IMHO, this is a great way of virtually exploring 4D data!&lt;/p&gt;
&lt;p&gt;In the temporal tab, you can set the temporal range for the animation.
For the animation shown below, I only use the last 5 years of data (otherwise the GIF will be too large).&lt;/p&gt;
&lt;p&gt;For saving the animation, go to the &lt;code&gt;Video Creator&lt;/code&gt; tab, and set an output directory.
The export process takes two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Export the frames as images.
This is done by pushing the movie tape button.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; The size of the exported images depends on the size of the map canvas.
This will have a direct effect on the size of the final animation.
Adjust the canvas size to your needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate the animation by pushing the &lt;code&gt;MP4&lt;/code&gt; or &lt;code&gt;GIF&lt;/code&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-tsi-rtm.gif&#34; data-caption=&#34;Animation of interpolated Tasseled Cap time series&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-tsi-rtm.gif&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Animation of interpolated Tasseled Cap time series
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;That&#39;s it. Have fun exploring your 4D data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FORCE Tutorial: Processing Masks</title>
      <link>https://davidfrantz.github.io/tutorials/force-masks/masks/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://davidfrantz.github.io/tutorials/force-masks/masks/</guid>
      <description>&lt;p&gt;&lt;em&gt;This tutorial uses FORCE v. 3.0&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;learning-objective&#34;&gt;&lt;strong&gt;Learning Objective&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This tutorial explains how to generate and use processing masks in the &lt;strong&gt;FORCE Higher Level Processing System&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-are-processing-masks&#34;&gt;&lt;strong&gt;What are processing masks?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In the &lt;strong&gt;FORCE Higher Level Processing System&lt;/strong&gt;, processing masks can be used to restrict processing and analysis to certain pixels of interest. The masks need to be in datacube format, i.e. they need to be raster images in the same grid as all the other data. The masks can - but donât need to - be in the same directory as the other data. The masks should be binary images. The pixels that have a mask value of 0 will be skipped.&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-advantage-of-using-processing-masks&#34;&gt;&lt;strong&gt;What is the advantage of using processing masks?&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Processing masks speed up processing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each processing unit (block within the tile), the analysis mask is read first. If no valid pixel is in there, all the other data are not input, and the block is skipped. As an example, when processing a country like Japan, and provide a land mask, you can speed up processing significantly as many blocks are skipped entirely.&lt;/li&gt;
&lt;li&gt;On the pixel level, invalid pixels are skipped, too. This is especially beneficial for CPU-heavy tasks, e.g. machine learning predictions. As an example, when computing a tree species classification, you can speed up processing substantially if you provide a forest masks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processing masks decrease data volume substantially.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the processed products, the pixels of no interest have a nodata value. As all FORCE output is compressed (unless you choose to output in ENVI format; I donât recommend to do this), the compression kicks in nicely if you have used processing masks. You can easily decrease data volume by several factors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processing masks facilitate analyzing the processed data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the processed products, the pixels of no interest have a nodata value. Thus, you donât need to sort the pixels on your own, e.g. computing confusion matrices and classification accuracy is more straightforward to implement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;generate-processing-masks&#34;&gt;&lt;strong&gt;Generate processing masks&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;option-1-from-shapefile-to-mask&#34;&gt;&lt;strong&gt;Option 1: from shapefile to mask&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;FORCE&lt;/strong&gt; comes with a program to generate processing masks from a shapefile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-cube
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Usage: force-cube input-file output-dir resample resolution
       input-file: the file you want to cube
       output-dir: the directory you want to store the cubes;
                   datacube-definition.prj needs to exist in there
       resample:   resampling method
                   (1) any GDAL resampling method for raster data, e.g. cubic
                   (2) rasterize for vector data
       resolution: the resolution of the cubed data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;force-cube&lt;/code&gt; imports raster or vector data into the datacube format needed by &lt;strong&gt;FORCE&lt;/strong&gt;. The output directory needs to contain a copy of the datacube definition (see datacube tutorial).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rasterize&lt;/code&gt; resampling option rasterizes polygon vector geometries. It burns the occurence of the geometry into a raster image, i.e. it assigns the value &lt;em&gt;1&lt;/em&gt; to all cells that are covered by a geometry, &lt;em&gt;0&lt;/em&gt; if not. The resulting masks are compressed GeoTiff images. Do not worry about data volume when converting from vector to raster data, because the compression rate is extremely high.&lt;/p&gt;
&lt;p&gt;In the following example, we generate a processing mask for the administrative area of Vienna, Austria.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-cube vienna.shp /data/Dagobah/edc/misc/mask rasterize 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0...10...20...30...40...50...60...70...80...90...100 - done.
0...10...20...30...40...50...60...70...80...90...100 - done.
0...10...20...30...40...50...60...70...80...90...100 - done.
0...10...20...30...40...50...60...70...80...90...100 - done.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, Vienna is covered by four tiles, a cubed GeoTiff was generated in each tile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/misc/mask/X*/vienna.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/data/Dagobah/edc/misc/mask/X0077_Y0058/vienna.tif
/data/Dagobah/edc/misc/mask/X0077_Y0059/vienna.tif
/data/Dagobah/edc/misc/mask/X0078_Y0058/vienna.tif
/data/Dagobah/edc/misc/mask/X0078_Y0059/vienna.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For speedy visuailzation, build overviews and pyramids:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-mosaic /data/Dagobah/edc/misc/mask
force-pyramid /data/Dagobah/edc/misc/mask/mosaic/vienna.vrt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mosaicking vienna.tif
4 chips found.
computing pyramids for vienna.vrt
0...10...20...30...40...50...60...70...80...90...100 - done.
&lt;/code&gt;&lt;/pre&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-mask-vector.jpg&#34; data-caption=&#34;Mask of Vienna generated from a shapefile. Overlayed with the processing grid in green&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-mask-vector.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Mask of Vienna generated from a shapefile. Overlayed with the processing grid in green
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;option-2-from-raster-to-mask&#34;&gt;&lt;strong&gt;Option 2: from raster to mask&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;As of now, &lt;strong&gt;FORCE&lt;/strong&gt; does not come with a handy tool to generate masks from a raster image with continuous values (this is on my to-do list though). However, you can follow this recipe to accomplish this.&lt;/p&gt;
&lt;p&gt;In the example given below, our input image is a multiband continuous fields dataset, which gives the percentages of built-up land (urban), high vegetation (trees), and low vegetation (grass, agriculture). Point 1) may be skipped if the data are already in datacube format, which is the case in this example.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the data are not already in the datacube format, use &lt;code&gt;force-cube&lt;/code&gt; to import the data (see the usage above). Use a raster resampling option to trigger the raster import, e.g. &lt;code&gt;cubic&lt;/code&gt; (bc it&#39;s all about cubes, eh?).&lt;/li&gt;
&lt;li&gt;Go to the parent directory of the cubed images (this is important for the next point), and generate a list with the filenames:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /data/Jakku/germany-LC/pred
ls X*/CONFIELD_MLP.tif &amp;gt; files.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;In this example, the image covers 597 tiles:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wc -l files.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;597 files.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;head files.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;X0052_Y0045/CONFIELD_MLP.tif
X0052_Y0046/CONFIELD_MLP.tif
X0052_Y0047/CONFIELD_MLP.tif
X0052_Y0048/CONFIELD_MLP.tif
X0052_Y0049/CONFIELD_MLP.tif
X0052_Y0050/CONFIELD_MLP.tif
X0052_Y0051/CONFIELD_MLP.tif
X0052_Y0052/CONFIELD_MLP.tif
X0052_Y0053/CONFIELD_MLP.tif
X0053_Y0045/CONFIELD_MLP.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Generate the masks using a command similar to the example below. The 1st part of the command uses the list from point 2), and parallely calls the command in parentheses &lt;code&gt;&amp;quot;...&amp;quot;&lt;/code&gt;. The curly braces &lt;code&gt;{//}&lt;/code&gt; replace the input image with its dirname, i.e. with the tile ID. A directory for the tile is generated if it is not already existing. The &lt;code&gt;gdal_calc.py&lt;/code&gt; command handles simple raster algebra. The &lt;code&gt;-A&lt;/code&gt; and &lt;code&gt;--A_band&lt;/code&gt; options specify the image and band on which to operate the calculation specified by &lt;code&gt;--calc&lt;/code&gt; (in our input image, the tree percentage is in band 2). A binary image (= mask) will be generated, wherein all pixels larger than 3000 (i.e. 30%) are set to &lt;em&gt;1&lt;/em&gt;. The &lt;code&gt;--creation-option&lt;/code&gt; parameters are options that specify compression etc. The blocksize parameters should best reflect the blocksize used for the datacube (see datacube tutorial). &lt;em&gt;As said before, a tool for this will likely be implemented in a not-so-far future version of FORCE.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;parallel -a files.txt &amp;quot;mkdir -p /data/Dagobah/edc/misc/mask/{//}; gdal_calc.py -A {} --A_band=2 --outfile=/data/Dagobah/edc/misc/mask/{//}/forest-mask.tif --calc=&#39;(A&amp;gt;3000)&#39; --NoDataValue=255 --type=Byte --format=GTiff --creation-option=&#39;COMPRESS=LZW&#39; --creation-option=&#39;PREDICTOR=2&#39; --creation-option=&#39;NUM_THREADS=ALL_CPUS&#39; --creation-option=&#39;BIGTIFF=YES&#39; --creation-option=&#39;BLOCKXSIZE=3000&#39; --creation-option=&#39;BLOCKYSIZE=300&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have one cubed mask for each input image in the mask directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/misc/mask/X*/forest-mask.tif | wc -l
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;597
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For speedy visuailzation, build overviews and pyramids:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-mosaic /data/Dagobah/edc/misc/mask
force-pyramid /data/Dagobah/edc/misc/mask/mosaic/forest-mask.vrt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mosaicking forest-mask.tif
597 chips found.
computing pyramids for forest-mask.vrt
0...10...20...30...40...50...60...70...80...90...100 - done.
&lt;/code&gt;&lt;/pre&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-mask-raster.jpg&#34; data-caption=&#34;Forest mask generated from continuous raster input. Overlayed with the processing grid in green&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-mask-raster.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Forest mask generated from continuous raster input. Overlayed with the processing grid in green
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;use-processing-masks&#34;&gt;&lt;strong&gt;Use processing masks&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Processing masks can easily be used in &lt;code&gt;force-higher-level&lt;/code&gt; by setting the &lt;code&gt;DIR_MASK&lt;/code&gt; and &lt;code&gt;BASE_MASK&lt;/code&gt; parameters in the parameter file. They are the parent directory of the cubed masks, and the basename of the masks, respectively. To use the Vienna mask from above:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIR_MASK = /data/Dagobah/edc/misc/mask&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BASE_MASK = vienna.tif&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FORCE Tutorial: The Datacube</title>
      <link>https://davidfrantz.github.io/tutorials/force-datacube/datacube/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://davidfrantz.github.io/tutorials/force-datacube/datacube/</guid>
      <description>&lt;p&gt;&lt;em&gt;This tutorial uses FORCE v. 3.0&lt;/em&gt;&lt;/p&gt;
&lt;script src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;learning-objective&#34;&gt;&lt;strong&gt;Learning Objective&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This tutorial explains what a datacube is, how it is parameterized, how you can find a POI, how to visualize the tiling grid, and how to conveniently display cubed data.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;FORCE makes heavy use of the data cube concept. This includes two main points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All data are in the &lt;strong&gt;same coordinate system&lt;/strong&gt;, which should be valid for a large regional extent (e.g. a continental projection).&lt;/li&gt;
&lt;li&gt;The data are organized in regular, non-overlapping &lt;strong&gt;tiles&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-datacube-scheme.jpg&#34; data-caption=&#34;Overview of the datacube concept in FORCE&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-datacube-scheme.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Overview of the datacube concept in &lt;strong&gt;FORCE&lt;/strong&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The âgridâ is the regular spatial subdivision of the land surface in the target coordinate system.&lt;/li&gt;
&lt;li&gt;The âgrid originâ is the location, where the tile numbering starts with zero. Tile numbers increase toward the South and East. Although not recommended, negative tile numbers may be present if the tile origin is not NorthâWest of the study area.&lt;/li&gt;
&lt;li&gt;The âtileâ is one entity of the grid, i.e., a grid cell with a unique tile identifier, e.g., X0003_Y0002. The tile is stationary, i.e., it always covers the same extent on the land surface.&lt;/li&gt;
&lt;li&gt;The âtile sizeâ is defined in target coordinate system units (most commonly in meters). Tiles are square.&lt;/li&gt;
&lt;li&gt;Each âoriginal imageâ is partitioned into several âchipsâ, i.e., any original image is intersected with the grid and then tiled into chips.&lt;/li&gt;
&lt;li&gt;Chips are grouped in âdatasetsâ, which group data, e.g. according to acquisition date and sensor.&lt;/li&gt;
&lt;li&gt;The âdata cubeâ groups all datasets within a tile in a time-ordered manner. The data cube may contain data from several sensors and different resolutions. Thus, the pixel size is allowed to vary, but the tile extent stays fixed. The tile size must be a multiple of the resolutions. Other data like features or auxiliary data are also permitted in the data cube (e.g. DEM or climate variables).&lt;/li&gt;
&lt;li&gt;The data cube concept allows for non-redundant data storage and efficient data access, as well as simplified extraction of data and information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;how-to-define-the-datacube-parameters&#34;&gt;&lt;strong&gt;How to define the datacube parameters?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;When generating Level 2 ARD data with &lt;strong&gt;FORCE L2PS&lt;/strong&gt;, you need to define the datacube in the parameter file. Empty parameter files can be generated with &lt;code&gt;force-parameter&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DO_REPROJ&lt;/code&gt; indicates whether the images should be reprojected to the target coordinate system - or stay in their original UTM projection.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DO_TILE&lt;/code&gt; indicates whether the images should be tiled to chips that intersect with the grid system - or stay in the original reference system (WRS-2/MGRS).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROJECTION&lt;/code&gt; defines the target coordinate system. This projection should ideally be valid for a large geographic extent. The projection needs to given as &amp;ldquo;WKT&amp;rdquo; string. You can verify your projection (and convert to WKT from another format) using &lt;code&gt;gdalsrsinfo&lt;/code&gt; (see below). If this fails, you need to fix the projection - otherwise &lt;strong&gt;FORCE L2PS&lt;/strong&gt; will likely fail, too.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ORIGIN_LAT&lt;/code&gt; and &lt;code&gt;ORIGIN_LON&lt;/code&gt; are the origin coordinates of the grid system in decimal degree. The upper left corner of tile X0000_Y0000 represents this point. It is a good choice to use a coordinate that is North-West of your study area â to avoid negative tile numbers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TILE_SIZE&lt;/code&gt; is the tile size (in target units, commonly in meters). Tiles are square.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BLOCK_SIZE&lt;/code&gt; is the block size (in target units, commonly in meters) of the image chips. Blocks are stripes, i.e. they are as wide as the tile and as high as specified here. The blocks represent the internal structure of the GeoTiffs, and represent the primary processing unit of the force-higher-level routines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two default projection / grid systems are predefined in &lt;strong&gt;FORCE&lt;/strong&gt;. They can be specified via the &lt;code&gt;PROJECTION&lt;/code&gt; parameter instead of giving a WKT string. The predefined options have their own settings for &lt;code&gt;ORIGIN_LAT&lt;/code&gt;, &lt;code&gt;ORIGIN_LON&lt;/code&gt;, &lt;code&gt;TILE_SIZE&lt;/code&gt;, and &lt;code&gt;BLOCK_SIZE&lt;/code&gt;, thus the values given in the parameterfile will be ignored. &lt;a href=&#34;https://cartography.tuwien.ac.at/eurocarto/wp-content/uploads/2015/09/3_6_ppt.pdf&#34;&gt;EQUI7&lt;/a&gt; consists of 7 Equi-Distant, continental projections with a tile size of 100km. &lt;a href=&#34;https://measures-glance.github.io/glance-grids/&#34;&gt;GLANCE7&lt;/a&gt; consists of 7 Equal-Area, continental projections, with a tile size of 150km. One datacube will be generated for each continent.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you are not using the datacube options, i.e. &lt;code&gt;DO_REPROJ = FALSE&lt;/code&gt; or &lt;code&gt;DO_TILE = FALSE&lt;/code&gt;, you are running into a &lt;strong&gt;dead end&lt;/strong&gt; for &lt;strong&gt;FORCE&lt;/strong&gt;. In this case, the data cannot be further processed or analysed with any higher level FORCE functionality&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-validate-the-projection&#34;&gt;&lt;strong&gt;How to validate the projection?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;GDAL has a built-in projection conversion/validation tool:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdalsrsinfo -v &#39;PROJCS[&amp;quot;ETRS89 / LAEA Europe&amp;quot;,GEOGCS[&amp;quot;ETRS89&amp;quot;,DATUM[&amp;quot;European_Terrestrial_Reference_System_1989&amp;quot;,SPHEROID[&amp;quot;GRS 1980&amp;quot;,6378137,298.257222101,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;7019&amp;quot;]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;6258&amp;quot;]],PRIMEM[&amp;quot;Greenwich&amp;quot;,0,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;8901&amp;quot;]],UNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9122&amp;quot;]],AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;4258&amp;quot;]],PROJECTION[&amp;quot;Lambert_Azimuthal_Equal_Area&amp;quot;],PARAMETER[&amp;quot;latitude_of_center&amp;quot;,52],PARAMETER[&amp;quot;longitude_of_center&amp;quot;,10],PARAMETER[&amp;quot;false_easting&amp;quot;,4321000],PARAMETER[&amp;quot;false_northing&amp;quot;,3210000],UNIT[&amp;quot;metre&amp;quot;,1,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9001&amp;quot;]],AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;3035&amp;quot;]]&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Validate Succeeds

PROJ.4 : &#39;+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs &#39;

OGC WKT :
PROJCS[&amp;quot;ETRS89 / LAEA Europe&amp;quot;,
    GEOGCS[&amp;quot;ETRS89&amp;quot;,
        DATUM[&amp;quot;European_Terrestrial_Reference_System_1989&amp;quot;,
            SPHEROID[&amp;quot;GRS 1980&amp;quot;,6378137,298.257222101,
                AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;7019&amp;quot;]],
            TOWGS84[0,0,0,0,0,0,0],
            AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;6258&amp;quot;]],
        PRIMEM[&amp;quot;Greenwich&amp;quot;,0,
            AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;8901&amp;quot;]],
        UNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,
            AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9122&amp;quot;]],
        AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;4258&amp;quot;]],
    PROJECTION[&amp;quot;Lambert_Azimuthal_Equal_Area&amp;quot;],
    PARAMETER[&amp;quot;latitude_of_center&amp;quot;,52],
    PARAMETER[&amp;quot;longitude_of_center&amp;quot;,10],
    PARAMETER[&amp;quot;false_easting&amp;quot;,4321000],
    PARAMETER[&amp;quot;false_northing&amp;quot;,3210000],
    UNIT[&amp;quot;metre&amp;quot;,1,
        AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9001&amp;quot;]],
    AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;3035&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;where-is-the-datacube-definition-stored&#34;&gt;&lt;strong&gt;Where is the datacube definition stored?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;At the top level of the generated datacube, a text file will be generated (&lt;code&gt;datacube-definition.prj&lt;/code&gt;). This file is key for all
&lt;strong&gt;FORCE&lt;/strong&gt; higher-level functionality. Each higher-level module will save a copy of this file in the corresponding output directory. If this file is not present, the tools will fail. Therefore, &lt;strong&gt;do not modify, move, or delete this file&lt;/strong&gt;. This file contains the datacube definition as defined above.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;projection in WKT&lt;/li&gt;
&lt;li&gt;grid origin, longitude&lt;/li&gt;
&lt;li&gt;grid origin, latitude&lt;/li&gt;
&lt;li&gt;grid origin, x-coordinate in projection&lt;/li&gt;
&lt;li&gt;grid origin, y-coordinate in projection&lt;/li&gt;
&lt;li&gt;tile size in projection units&lt;/li&gt;
&lt;li&gt;block size in projection units&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat /data/Dagobah/edc/level2/datacube-definition.prj
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;PROJCS[&amp;quot;ETRS89 / LAEA Europe&amp;quot;,GEOGCS[&amp;quot;ETRS89&amp;quot;,DATUM[&amp;quot;European_Terrestrial_Reference_System_1989&amp;quot;,SPHEROID[&amp;quot;GRS 1980&amp;quot;,6378137,298.257222101,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;7019&amp;quot;]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;6258&amp;quot;]],PRIMEM[&amp;quot;Greenwich&amp;quot;,0,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;8901&amp;quot;]],UNIT[&amp;quot;degree&amp;quot;,0.0174532925199433,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9122&amp;quot;]],AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;4258&amp;quot;]],PROJECTION[&amp;quot;Lambert_Azimuthal_Equal_Area&amp;quot;],PARAMETER[&amp;quot;latitude_of_center&amp;quot;,52],PARAMETER[&amp;quot;longitude_of_center&amp;quot;,10],PARAMETER[&amp;quot;false_easting&amp;quot;,4321000],PARAMETER[&amp;quot;false_northing&amp;quot;,3210000],UNIT[&amp;quot;metre&amp;quot;,1,AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;9001&amp;quot;]],AUTHORITY[&amp;quot;EPSG&amp;quot;,&amp;quot;3035&amp;quot;]]
-25.000000
60.000000
2456026.250000
4574919.500000
30000.000000
3000.0000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;In some rare circumstances, you might need to generate this file on your own. However, this only applies if - for any reason - you skip the Level 2 processing (e.g. if you only want to work with external features, or trick &lt;strong&gt;FORCE&lt;/strong&gt; into using external ARD datasets).&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-is-the-datacube-organized&#34;&gt;&lt;strong&gt;How is the datacube organized?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In practice, the tiles are directories in the file system, and each chip represents one file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/level2 | tail
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;X0134_Y0095
X0134_Y0096
X0134_Y0097
X0134_Y0098
X0134_Y0099
X0135_Y0095
X0135_Y0096
X0135_Y0097
X0135_Y0098
X0135_Y0099
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/level2/X0134_Y0097/*.tif | tail
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_CLD.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_HOT.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_QAI.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_VZN.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181230_LEVEL2_SEN2B_BOA.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181230_LEVEL2_SEN2B_CLD.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181230_LEVEL2_SEN2B_HOT.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181230_LEVEL2_SEN2B_QAI.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181230_LEVEL2_SEN2B_VZN.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the tile, &lt;strong&gt;FORCE&lt;/strong&gt; semantically groups files into datasets if they have the same sensor and date (e.g. multiple products like Bottom-of-Atmosphere reflectance &lt;code&gt;BOA&lt;/code&gt; and Quality Assurance Information &lt;code&gt;QAI&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_*.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_CLD.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_HOT.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_QAI.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_VZN.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to note that chips in different tiles have the same filename, thus they can easily be mosaicked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/level2/X*/20181225_LEVEL2_SEN2A_BOA.tif | wc -l
ls /data/Dagobah/edc/level2/X*/20181225_LEVEL2_SEN2A_BOA.tif | tail
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;49
/data/Dagobah/edc/level2/X0133_Y0100/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0134_Y0096/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0134_Y0097/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0134_Y0098/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0134_Y0099/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0135_Y0095/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0135_Y0096/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0135_Y0097/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0135_Y0098/20181225_LEVEL2_SEN2A_BOA.tif
/data/Dagobah/edc/level2/X0135_Y0099/20181225_LEVEL2_SEN2A_BOA.tif
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;i-processed-quite-some-data-there-are-many-many-tiles-how-do-i-find-a-poi&#34;&gt;&lt;strong&gt;I processed quite some data. There are many, many tiles. How do I find a POI?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Given any coordinate \((\lambda,\phi)\), the computation of the corresponding tile is pretty straightforward.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Convert the coordinate \((\lambda,\phi)\) to the projected coordinate \((X,Y)\)&lt;/li&gt;
&lt;li&gt;Given the tile size \(t_s\) and the grid origin in projected coordinates \((X_O,Y_O)\), the tile ID can be computed as \(Tile_X = floor((X-X_O)/t_s)\) and \(Tile_Y = floor((Y_O-Y)/t_s)\)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With some more math, you can also compute the exact pixel.&lt;/p&gt;
&lt;p&gt;However, there is also a &lt;strong&gt;FORCE&lt;/strong&gt; program that relieves you from doing this on your own:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-tile-finder
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;usage: force-tile-finder datacube lon lat res
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-tile-finder /data/Dagobah/edc/level2 13.404194 52.502889 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Point { LON/LAT (13.40,52.50) | X/Y (4552071.50,3271363.25) }
  is in tile X0069_Y0043 at pixel 2604/1355
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another useful &lt;strong&gt;FORCE&lt;/strong&gt; program can generate a vector file (shapefile or kml) for convenient display of the tiles.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-tabulate-grid
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;usage: force-tabulate-grid datacube bottom top left right format
             format: shp or kml
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-tabulate-grid /data/Dagobah/edc/level2 35 60 0 20 kml
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/data/Dagobah/edc/level2/datacube-grid.kml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The grid can easily be loaded in GoogleEarth or any GIS. The attribute table contains the tile ID.&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-datacube-google-grid.jpg&#34; data-caption=&#34;Exported grid loaded in Google Earth&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-datacube-google-grid.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Exported grid loaded in Google Earth
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;how-to-visualize-data-for-a-large-extent-more-conveniently&#34;&gt;&lt;strong&gt;How to visualize data for a large extent more conveniently?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Whenever you use a FORCE routine, cubed data will be generated. It is a bit cumbersome to display such data for a large extent without some further treatment. The following recipe can be used for any cubed &lt;strong&gt;FORCE&lt;/strong&gt; data - irrespective of processing level.&lt;/p&gt;
&lt;p&gt;Lucky us, the &lt;a href=&#34;https://gdal.org/drivers/raster/vrt.html&#34;&gt;GDAL virtual format&lt;/a&gt; represents an ideal concept for this. With VRTs, mosaicks of cubed data can be generated without physically copying the data. The VRT is basically a text file in xml-Format, which both holds (relative) links to the original data and the rules to assemble the mosaic on-the-fly.
&lt;strong&gt;FORCE&lt;/strong&gt; comes with a tool to generate such mosaics:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-mosaic
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Usage: force-mosaic tiled-archive
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-mosaic /data/Dagobah/edc/level2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;force-mosaic searches for image files in the datacube, and mosaics all files with the same basename. The mosaics are stored in the &lt;code&gt;mosaic&lt;/code&gt; subdirectory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/level2/mosaic | head
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;19840328_LEVEL2_LND05_BOA.vrt
19840328_LEVEL2_LND05_CLD.vrt
19840328_LEVEL2_LND05_HOT.vrt
19840328_LEVEL2_LND05_QAI.vrt
19840328_LEVEL2_LND05_VZN.vrt
19840409_LEVEL2_LND05_BOA.vrt
19840409_LEVEL2_LND05_CLD.vrt
19840409_LEVEL2_LND05_HOT.vrt
19840409_LEVEL2_LND05_QAI.vrt
19840409_LEVEL2_LND05_VZN.vrt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To speed up visualization, pyramids might be generated for the VRT files. This significantly increases loading and response times for visualization. However, pyramid layers are basically copies of the original data at reduced resolution, and as such, they consume some disc space. Consider from case to case whether fast display merits the excess disc usage. &lt;strong&gt;FORCE&lt;/strong&gt; comes with a tool to generate pyramids:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-pyramid
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Usage: force-pyramid file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pyramids for one file can be generated with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-pyramid /data/Dagobah/edc/level2/mosaic/19840828_LEVEL2_LND05_BOA.vrt
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/data/Dagobah/edc/level2/mosaic/19840828_LEVEL2_LND05_BOA.vrt
computing pyramids for 19840828_LEVEL2_LND05_BOA.vrt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Practically, a DEFLATE compressed overview image will be stored next to the VRT:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/level2/mosaic/19840828_LEVEL2_LND05_BOA*
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/data/Dagobah/edc/level2/mosaic/19840828_LEVEL2_LND05_BOA.vrt
/data/Dagobah/edc/level2/mosaic/19840828_LEVEL2_LND05_BOA.vrt.ovr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pyramids for all VRT mosaics can be parallely generated with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /data/Dagobah/edc/level2/mosaic/*.vrt | parallel force-pyramid {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any modern software based on GDAL (e.g. QGIS) is able to display VRTs, and can also handle the attached pyramid layers. Mosaicking is done on-the-fly, data outside of the display extent are not loaded.&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-datacube-mosaic.jpg&#34; data-caption=&#34;VRT mosaick loaded in QGIS&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-datacube-mosaic.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    VRT mosaick loaded in QGIS
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>FORCE Tutorial: Quality Bits a.k.a. Cloud Masks etc.</title>
      <link>https://davidfrantz.github.io/tutorials/force-qai/qai/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://davidfrantz.github.io/tutorials/force-qai/qai/</guid>
      <description>&lt;p&gt;&lt;em&gt;This tutorial uses FORCE v. 3.0&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;learning-objective&#34;&gt;&lt;strong&gt;Learning Objective&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This tutorial will explain what quality bits are, how quality bits are implemented in &lt;strong&gt;FORCE&lt;/strong&gt;, how to visualize them, and how to deal with them in Higher Level Processing.&lt;/p&gt;
&lt;h2 id=&#34;what-are-quality-bits&#34;&gt;&lt;strong&gt;What are quality bits?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;FORCE L2PS&lt;/strong&gt; provides a description of the quality of each pixel in the form of quality bits. This bit-packed information allows users to apply per pixel filters to all Level 2 products. The bits represent combinations of surface, atmospheric, and processing-related conditions that can affect the overall usefulness of a given pixel for a particular application. The success of any follow-up analysis depends on the rigorous usage of these information!
A good explanation of quality bits is given by the &lt;a href=&#34;https://www.usgs.gov/land-resources/nli/landsat/landsat-collection-1-level-1-quality-assessment-band?qt-science_support_page_related_con=0#qt-science_support_page_related_con&#34;&gt;USGS&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The bit-packed information in the QA bands is a translation of binary strings. For example, the integer value â1â translates to the binary value â0001.â The binary value â0001â has 4 bits, written right to left as bits 0 (â1â), 1 (â0â), 2 (â0â), and 3 (â0â). Each of the bits 0-3 represents a condition that can affect the calculation of a physical value. [&amp;hellip;] If the condition is true, the bit is set to â1,â or â0â if false.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;sounds-complicated-why-not-use-a-scene-classification&#34;&gt;&lt;strong&gt;Sounds complicatedâ¦ Why not use a scene classification?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Although interpretation of quality bits is not immediate to humans, they do possess quite some advantages. As opposed to a scene classification, quality bits allow the flagging of multiple conditions, e.g. ice clouds, cloud shadows on top of clouds or snow, high aerosol load and cloud, etc. If a 16bit Integer is used for storing the quality bits, up to 16 different conditions can co-exist in any possible combination. In a scene classification, only one condition can be stored, and the algorithm developer needs to make assumptions on the priority of the conditions; however these may differ from application to application. Quality bits allow to store all these information in a single  image. From a technical perspective, quality bits save disc space, and reduce the I/O load for follow-up analyses.&lt;/p&gt;
&lt;h2 id=&#34;quality-bits-in-force&#34;&gt;&lt;strong&gt;Quality bits in FORCE&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In &lt;strong&gt;FORCE&lt;/strong&gt;, the quality bits are found in the Quality Assurance Information (&lt;code&gt;QAI&lt;/code&gt;) product, which is an integral part of each Level 2 dataset, and is alway present next to the reflectance images (&lt;code&gt;BOA&lt;/code&gt; or &lt;code&gt;TOA&lt;/code&gt;).
When generating Best Available Pixel (&lt;code&gt;BAP&lt;/code&gt;) composites (Level 3), the bit flags of the selected observation are stored in the first band of the composite information (&lt;code&gt;INF&lt;/code&gt;) product.
Currently &lt;strong&gt;FORCE&lt;/strong&gt; implements a 16bit QAI layer with 12 quality bits, some of them as double-bit words:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Bit No.&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Parameter name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Bit comb.&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Integer&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;State&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Valid data&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;valid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1â2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cloud state&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;clear&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;less confident cloud (i.e., buffered cloud 300 m)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;confident, opaque cloud&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;cirrus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cloud shadow flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Snow flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Water flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;6â7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Aerosol state&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;estimated (best quality)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;interpolated (mid quality)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;high (aerosol optical depth &amp;gt; 0.6, use with caution)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;fill (global fallback, low quality)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Subzero flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yes (use with caution)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saturation flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yes (use with caution)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;High sun zenith flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yes (sun elevation &amp;lt; 15Â°, use with caution)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;11â12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Illumination state&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;good (incidence angle &amp;lt; 55Â°, best quality for top. correction)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;medium (incidence angle 55Â°â80Â°, good quality for top. correction)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;poor (incidence angle &amp;gt; 80Â°, low quality for top. correction)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;shadow (incidence angle &amp;gt; 90Â°, no top. correction applied)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Slope flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;no (cosine correction applied)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;yes (enhanced C-correction applied)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Water vapor flag&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;measured (best quality, only Sentinel-2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;fill (scene average, only Sentinel-2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Empty&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TBD&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Nodata values are values where nothing was observed, where auxiliary data was not given (e.g. nodata in DEM), or
where data is substantially corrupt (e.g. impulse noise, or when the surface reflectance estimate is &amp;gt; 2.0 or &amp;lt; -1.0)&lt;/li&gt;
&lt;li&gt;Clouds are given in three categories, i.e. opaque clouds (confident cloud), buffered clouds (300m; less confident cloud), and cirrus clouds.&lt;/li&gt;
&lt;li&gt;Cloud shadows are detected on the basis of the cloud layer. If a cloud is missed, the cloud shadow is missed, too. If a false
positive cloud is detected, false positive cloud shadows follow.&lt;/li&gt;
&lt;li&gt;Aerosol Optical Depth is estimated for fairly coarse grid cells. If there is no valid AOD estimation in any cell, values are
interpolated. If there is no valid AOD estimation for the complete image, a fill value is assigned (AOD is guessed). If AOD @550nm is higher than 0.6, it is flagged as high aerosol; this is not necessarily critical, but should be used with caution (see subzero flag).&lt;/li&gt;
&lt;li&gt;If the surface reflectance estimate in any band is &amp;lt; 0, the subzero flag is set. This can point to overestimation of AOD.&lt;/li&gt;
&lt;li&gt;If DNs were saturated, or if the surface reflectance estimate in any band is &amp;gt; 1, the saturation flag is set.&lt;/li&gt;
&lt;li&gt;If sun elevation is smaller than 15Â°, the high sun zenith flag is set. Use this data with caution, radiative transfer computations might be out of specification.&lt;/li&gt;
&lt;li&gt;The illumination state is related to the quality of the topographic correction. If the incidence angle is smaller than 55Â°, quality is best. If the incidence angle is larger than 80Â°, the quality of the topographic correction is low, and data artefacts are possible. If the area is not illuminated at all, no topographic correction is done (values are the same as without topographic correction).&lt;/li&gt;
&lt;li&gt;The slope flag indicates whether a simple cosine correction (slope â¤ 2Â°) was used for topographic correction, or if the enhanced C-correction was used (slope &amp;gt; 2Â°).&lt;/li&gt;
&lt;li&gt;The water vapor flag indicates whether water vapor was estimated, or if the scene average was used to fill. Water vapor is not estimated over water and cloud shadow pixels. This flag only applies to Sentinel-2 images.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;visualization&#34;&gt;&lt;strong&gt;Visualization&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Visualizing the raw QAI image is pretty meaningless. Donât be surprised that the integers do not resemble any of the patterns you would expect (e.g. cloud distribution).&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-qai-boa.jpg&#34; data-caption=&#34;Sentinel-2B image over Berlin, 01.07.2019; left: RGB image; right: quality bits&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-qai-boa.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Sentinel-2B image over Berlin, 01.07.2019; left: RGB image; right: quality bits
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;quicklooks&#34;&gt;&lt;strong&gt;Quicklooks&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Since v. 3.0, &lt;strong&gt;FORCE L2PS&lt;/strong&gt; can output quicklook images for each Level 2 dataset (&lt;code&gt;OVV&lt;/code&gt; = overview product). These thumbnails serve as first impression of image quality. Some of the quality conditions are superimposed on the RGB images. Opaque clouds are shown in pink, cirrus clouds in red, cloud shadows in cyan, snow in yellow, saturated pixels in orange, and sub-zero reflectance values in a greenish tone. The overview for the QAI image from above is shown here:&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-qai-ovv.jpg&#34; data-caption=&#34;Quicklook image generated by FORCE L2PS; pink: opaque clouds; cyan: cloud shadows&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-qai-ovv.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Quicklook image generated by &lt;strong&gt;FORCE L2PS&lt;/strong&gt;; pink: opaque clouds; cyan: cloud shadows
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;inflate-quality-bits&#34;&gt;&lt;strong&gt;Inflate quality bits&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A full deciphering of all quality bits to individual quality masks can be generated with &lt;strong&gt;FORCE&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-qai-inflate
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Usage: force-qai-inflate QAI dir format
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;force-qai-inflate /data/level2/X0069_Y0043/20190701_LEVEL2_SEN2B_QAI.tif ~/temp GTiff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This program generates a 12-band image, where each of the flags (see table above) is written to a separate band. However, force-qai-inflate was not designed to generate inflated masks for each and every Level 2 product in a routine manner due to the computational and disc-space related overhead. We strongly recommend to make use of  the bits directly (see remaining part of the tutorial).&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-qai-cld.jpg&#34; data-caption=&#34;Quality bits; left: cloud state; right: cloud shadow flag&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-qai-cld.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Quality bits; left: cloud state; right: cloud shadow flag
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;quality-bit-rendering-in-qgis&#34;&gt;&lt;strong&gt;Quality bit rendering in QGIS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;There is a nice QGIS plugin from my colleague &lt;a href=&#34;https://www.geographie.hu-berlin.de/en/professorships/eol/people/labmembers/benjamin_jakimow&#34;&gt;Benjamin Jakimow&lt;/a&gt;, which can visualize quality bits in QGIS &lt;em&gt;on the fly&lt;/em&gt;. Quality bit inflating is not necessary anymore! The &lt;a href=&#34;http://plugins.qgis.org/plugins/BitFlagRenderer/&#34;&gt;Bit Flag Renderer plugin&lt;/a&gt; provides a new renderer for QGIS, with which any quality bit product can flexibly be visualized. The plugin includes predefined bit visualization rules for the &lt;strong&gt;FORCE&lt;/strong&gt; QAI bits. The default visualization matches the information and colors from the quicklook images described above):&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-qai-bfr.jpg&#34; data-caption=&#34;Bit Flag Renderer in QGIS displaying a quality bit layer on-the-fly with the pre-defined FORCE settings&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-qai-bfr.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Bit Flag Renderer in QGIS displaying a quality bit layer on-the-fly with the pre-defined FORCE settings
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;quality-masking-in-higher-level-processing&#34;&gt;&lt;strong&gt;Quality masking in Higher Level Processing&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;For follow-up processing and analyses, the usage of the QAI information is key, e.g. to exclude clouds. In all &lt;strong&gt;FORCE Higher Level routines&lt;/strong&gt;, quality masking is done on the fly, and the user has full control about what condition(s) to filter. The parameter &lt;code&gt;SCREEN_QAI&lt;/code&gt; provides a simple mechanism to mask out any combination of conditions using any of the following keywords: &lt;em&gt;NODATA, CLOUD_OPAQUE, CLOUD_BUFFER, CLOUD_CIRRUS, CLOUD_SHADOW, SNOW, WATER, AOD_FILL, AOD_HIGH, AOD_INT, SUBZERO, SATURATION, SUN_LOW, ILLUMIN_NONE, ILLUMIN_POOR, ILLUMIN_LOW, SLOPED, WVP_NONE&lt;/em&gt;. The default parametrization is to filter out nodata, clouds, cloud shadows, snow, saturated or subzero reflectance:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SCREEN_QAI = NODATA CLOUD_OPAQUE CLOUD_BUFFER CLOUD_CIRRUS CLOUD_SHADOW SNOW SUBZERO SATURATION&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Following images illustrate the effect of quality filtering on an average reflectance image generated by using all available observations over a 3 month period (using Spectral Temporal Metrics in the &lt;strong&gt;Time Series Analysis module&lt;/strong&gt;). The left image was produced by filtering nodata values only, the right image was produced using the default quality screening.&lt;/p&gt;



  











&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidfrantz.github.io/img/tutorial-qai-avg.jpg&#34; data-caption=&#34;Average reflectance over three month; left: not using quality bits; right with quality bits&#34;&gt;
&lt;img src=&#34;https://davidfrantz.github.io/img/tutorial-qai-avg.jpg&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Average reflectance over three month; left: &lt;strong&gt;not using&lt;/strong&gt; quality bits; right &lt;strong&gt;with&lt;/strong&gt; quality bits
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>
